Index: notes.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>120\r\n0 A4-square-2 C#4-square-2 E4-square-2\r\n2 A4-square-2 C#4-square-2 E4-square-2 F#4-square-2\r\n4 A4-square-2 C#4-square-2 E4-square-2 G4-square-2\r\n6 A4-square-2 C#4-square-2 E4-square-2 F#4-square-2\r\n8 A4-square-2 C#4-square-2 E4-square-2\r\n10 A4-square-2 C#4-square-2 E4-square-2 F#4-square-2\r\n12 A4-square-2 C#4-square-2 E4-square-2 G4-square-2\r\n14 A4-square-2 C#4-square-2 E4-square-2 F#4-square-2\r\n16 D4-triangle-2 F#4-triangle-2 A5-triangle-2\r\n18 C#4-triangle-2 F#4-triangle-2 A5-triangle-2\r\n20 E4-triangle-2 G#4-triangle-2 B5-triangle-2\r\n22 D4-triangle-2 F#4-triangle-2 A5-triangle-2\r\n24 C#4-triangle-2 F#4-triangle-2 A5-triangle-2\r\n26 A4-triangle-2 C#4-triangle-2 E4-triangle-2\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notes.txt b/notes.txt
--- a/notes.txt	(revision 7c3a94029c07c87a1f048295c171463c35f5abe4)
+++ b/notes.txt	(date 1758100351631)
@@ -12,4 +12,4 @@
 20 E4-triangle-2 G#4-triangle-2 B5-triangle-2
 22 D4-triangle-2 F#4-triangle-2 A5-triangle-2
 24 C#4-triangle-2 F#4-triangle-2 A5-triangle-2
-26 A4-triangle-2 C#4-triangle-2 E4-triangle-2
+26 A4-triangle-4 C#4-triangle-2 E4-triangle-2 A5-triangle-2
Index: player.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport pyaudio as pa\r\nfrom numpy import dtype\r\nfrom typing import NamedTuple, Any\r\n\r\nfrom file_reader import NoteSheet, ReadNote\r\nfrom music_utils import Note, Wave, Waveform\r\n\r\nclass Sound(NamedTuple):\r\n    note: np.float64\r\n    waveform: Wave\r\n\r\nclass PlayingNote:\r\n    def __init__(self, sound: Sound, duration_in_seconds: float):\r\n        self.sound = sound\r\n        self._duration = duration_in_seconds\r\n        self._remaining_duration = self._duration\r\n        self._buffer_time: float = 0.0\r\n\r\n    def decrease_duration(self, decrease: float):\r\n        if self.alive:\r\n            self._remaining_duration -= decrease\r\n\r\n    @property\r\n    def alive(self):\r\n        return self._remaining_duration > 0\r\n\r\n    def __str__(self):\r\n        return f'Playing Note playing sound {self.sound} for {self._duration} seconds, of which {self._remaining_duration} remain!'\r\n\r\nclass NotePlayer:\r\n    \"\"\"\r\n    Holds a PyAudio object and manages how notes are played\r\n    continuously.\r\n    \"\"\"\r\n    def __init__(self, sample_freq: int, buffer_size: float):\r\n        self._sample_freq: int = sample_freq\r\n        self._buffer_size: int = int(buffer_size * sample_freq)\r\n        self._buffer_time = self._buffer_size / sample_freq\r\n        self._player: pa.PyAudio = pa.PyAudio()\r\n        self._stream = self._player.open(format=pa.paFloat32,\r\n                                         channels=1,\r\n                                         rate=self._sample_freq,\r\n                                         output=True)\r\n        self._notes_queue: dict[Sound: tuple[list[float], float]] = dict()\r\n        self._base_func: np.ndarray[dtype: np.float32] = 2 * np.pi * np.arange(self._buffer_size)\r\n\r\n    def __del__(self):\r\n        if self.__getattribute__(\"_stream\"):\r\n            self._stream.stop_stream()\r\n            self._stream.close()\r\n            self._player.terminate()\r\n\r\n    def _add_note_to_queue(self, note: Note, waveform: Wave, new_queue: dict[Sound: tuple[float, float]]):\r\n        \"\"\"\r\n        Inserts a note into the queue to be played, and ensures continuity.\r\n        \"\"\"\r\n        found_note = False\r\n        for sound in self._notes_queue.keys():\r\n            if sound.note == note.freq and sound.waveform == waveform:\r\n                new_queue[sound] = (self._notes_queue[sound][0][-1] + self._base_func * sound.note / self._sample_freq,\r\n                                           (self._notes_queue[sound][1] + 1) / 2)\r\n                found_note = True\r\n                break\r\n        if not found_note:\r\n            key = Sound(note.freq, waveform)\r\n            new_queue[key] = (self._base_func * note.freq / self._sample_freq, 0.1)\r\n\r\n    def set_notes(self, notes: list[Note], waveforms: list[Wave]):\r\n        \"\"\"\r\n        Prepare queue of notes to be played.\r\n        \"\"\"\r\n        new_queue: dict[Sound: tuple[list[float], float]] = dict()\r\n        for note, waveform in zip(notes, waveforms):\r\n            self._add_note_to_queue(note, waveform, new_queue)\r\n        self._notes_queue = new_queue\r\n\r\n    def _add_sound_to_queue(self, sound: Sound, new_queue: dict[Sound: tuple[float, float]]):\r\n        \"\"\"\r\n        Inserts a sound into the queue to be played, and ensures continuity.\r\n        \"\"\"\r\n        found_note = False\r\n        for current_sound in self._notes_queue.keys():\r\n            if sound.note == current_sound.note and sound.waveform == current_sound.waveform:\r\n                new_queue[current_sound] = (self._notes_queue[current_sound][0][-1] + self._base_func * sound.note / self._sample_freq,\r\n                                           (self._notes_queue[current_sound][1] + 1) / 2)\r\n                found_note = True\r\n                break\r\n        if not found_note:\r\n            new_queue[sound] = (self._base_func * sound.note / self._sample_freq, 0.1)\r\n\r\n    def set_sounds(self, sounds: list[Sound]):\r\n        \"\"\"\r\n        Prepare sound of notes to be played.\r\n        \"\"\"\r\n        new_queue: dict[Sound: tuple[list[float], float]] = dict()\r\n        for sound in sounds:\r\n            self._add_sound_to_queue(sound, new_queue)\r\n        self._notes_queue = new_queue\r\n\r\n    def play_from_sheet_music(self, note_sheet: NoteSheet):\r\n        beat_time = note_sheet.beat_time\r\n        play_time = note_sheet.play_time\r\n        total_samples = self._sample_freq * play_time\r\n        num_buffers = int(total_samples / self._buffer_size)\r\n        self._buffer_time = self._buffer_size / self._sample_freq\r\n        current_time = 0.0\r\n        current_beat: int = 0\r\n\r\n        current_notes: list[PlayingNote] = list()\r\n        all_notes: list[list[ReadNote]] = note_sheet.get_notes()\r\n        buffers: list[bytes] = list()\r\n        for buffer in range(num_buffers):\r\n            if current_beat > len(all_notes):\r\n                break\r\n            notes_to_play: list[ReadNote] = all_notes[min(current_beat, len(all_notes)- 1)]\r\n            for note_to_play in notes_to_play:\r\n                note_as_sound: Sound = Sound(note_to_play.note.freq, note_to_play.wave)\r\n                if note_as_sound not in [read_note.sound for read_note in current_notes]:\r\n                    new_playing_note: PlayingNote = PlayingNote(sound=note_as_sound, duration_in_seconds=note_to_play.beats*beat_time)\r\n                    current_notes.append(new_playing_note)\r\n            for note in current_notes:\r\n                note.decrease_duration(self._buffer_time)\r\n\r\n            current_notes = [note for note in current_notes if note.alive]\r\n            current_notes_as_sounds = [note.sound for note in current_notes]\r\n            self.set_sounds(current_notes_as_sounds)\r\n            new_buffer: bytes = self.export_buffer()\r\n            buffers.append(new_buffer)\r\n            current_time += self._buffer_time\r\n            current_beat = int(current_time / beat_time)\r\n\r\n        self.play_buffers(buffers)\r\n\r\n    def export_buffer(self) -> bytes:\r\n        component_waves: list[np.ndarray[dtype[np.float32]]] = []\r\n        sound: Sound\r\n        note_data: tuple[np.ndarray[float], float]\r\n\r\n        for sound, note_data in self._notes_queue.items():\r\n            wave_gen: Waveform = sound.waveform\r\n            wave: np.ndarray[tuple[Any, ...], dtype[Any]] = wave_gen(note_data[0]) * note_data[1]\r\n            component_waves.append(wave.astype(np.float32))\r\n        if component_waves:\r\n            wave = np.sum(component_waves, axis=0) / len(component_waves)\r\n        else:\r\n            wave = np.zeros(self._buffer_size, dtype=np.float32)\r\n\r\n        return wave.tobytes()\r\n\r\n    def play_buffers(self, buffers: list[bytes]):\r\n        for buffer in buffers:\r\n            self._stream.write(buffer)\r\n\r\n    def play(self):\r\n        \"\"\"\r\n        Calculate waveforms for currently playing note and write to\r\n        the buffer to play them.\r\n        \"\"\"\r\n        component_waves: list[np.ndarray[dtype[np.float32]]] = []\r\n        sound: Sound\r\n        note_data: tuple[np.ndarray[float], float]\r\n\r\n        for sound, note_data in self._notes_queue.items():\r\n            wave_gen: Waveform = sound.waveform\r\n            wave: np.ndarray[tuple[Any, ...], dtype[Any]] = wave_gen(note_data[0]) * note_data[1]\r\n            component_waves.append(wave.astype(np.float32))\r\n        if component_waves:\r\n            wave = np.sum(component_waves, axis=0) / len(component_waves)\r\n        else:\r\n            wave = np.zeros(self._buffer_size, dtype=np.float32)\r\n\r\n        output_bytes = wave.tobytes()\r\n        self._stream.write(output_bytes)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/player.py b/player.py
--- a/player.py	(revision 7c3a94029c07c87a1f048295c171463c35f5abe4)
+++ b/player.py	(date 1758041258045)
@@ -98,6 +98,20 @@
             self._add_sound_to_queue(sound, new_queue)
         self._notes_queue = new_queue
 
+    def process_notes(self, notes_to_play: list[ReadNote], beat_time: float, current_notes) -> list[PlayingNote]:
+        for note_to_play in notes_to_play:
+            note_as_sound: Sound = Sound(note_to_play.note.freq, note_to_play.wave)
+            if note_as_sound not in [read_note.sound for read_note in current_notes]:
+                duration = note_to_play.beats * beat_time
+                new_playing_note: PlayingNote = PlayingNote(sound=note_as_sound,
+                                                            duration_in_seconds=duration
+                                                            )
+                current_notes.append(new_playing_note)
+        current_notes = [note for note in current_notes if note.alive]
+        for note in current_notes:
+            note.decrease_duration(self._buffer_time)
+        return current_notes
+
     def play_from_sheet_music(self, note_sheet: NoteSheet):
         beat_time = note_sheet.beat_time
         play_time = note_sheet.play_time
@@ -114,15 +128,7 @@
             if current_beat > len(all_notes):
                 break
             notes_to_play: list[ReadNote] = all_notes[min(current_beat, len(all_notes)- 1)]
-            for note_to_play in notes_to_play:
-                note_as_sound: Sound = Sound(note_to_play.note.freq, note_to_play.wave)
-                if note_as_sound not in [read_note.sound for read_note in current_notes]:
-                    new_playing_note: PlayingNote = PlayingNote(sound=note_as_sound, duration_in_seconds=note_to_play.beats*beat_time)
-                    current_notes.append(new_playing_note)
-            for note in current_notes:
-                note.decrease_duration(self._buffer_time)
-
-            current_notes = [note for note in current_notes if note.alive]
+            current_notes = self.process_notes(notes_to_play, beat_time, current_notes)
             current_notes_as_sounds = [note.sound for note in current_notes]
             self.set_sounds(current_notes_as_sounds)
             new_buffer: bytes = self.export_buffer()
@@ -157,18 +163,5 @@
         Calculate waveforms for currently playing note and write to
         the buffer to play them.
         """
-        component_waves: list[np.ndarray[dtype[np.float32]]] = []
-        sound: Sound
-        note_data: tuple[np.ndarray[float], float]
-
-        for sound, note_data in self._notes_queue.items():
-            wave_gen: Waveform = sound.waveform
-            wave: np.ndarray[tuple[Any, ...], dtype[Any]] = wave_gen(note_data[0]) * note_data[1]
-            component_waves.append(wave.astype(np.float32))
-        if component_waves:
-            wave = np.sum(component_waves, axis=0) / len(component_waves)
-        else:
-            wave = np.zeros(self._buffer_size, dtype=np.float32)
-
-        output_bytes = wave.tobytes()
+        output_bytes = self.export_buffer()
         self._stream.write(output_bytes)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"bff21e70-3f4d-41d7-80e9-ed1bbef9b25e\" name=\"Changes\" comment=\"Finished file reader - started integrating into player.py.\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/file_reader.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/file_reader.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/notes.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/notes.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/player.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/player.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;dorlo1994&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/dorlo1994/chiptune_player.git&quot;,\r\n    &quot;accountId&quot;: &quot;b4370dfd-09de-4684-a38b-c4f694883d11&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"32juVGbLyhH5dJiwDLh8MCDQwnx\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,\r\n    &quot;Python.file_reader.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.player.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"chiptune_player\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-82724e2b1abb-e2d783800521-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-251.28293.52\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"bff21e70-3f4d-41d7-80e9-ed1bbef9b25e\" name=\"Changes\" comment=\"\" />\r\n      <created>1757946324595</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1757946324595</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Imported code from HAILO Hackathon\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1757946690057</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1757946690058</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Type hints and working POC\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1757951882795</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1757951882795</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Rework wave dict into Enum with new call.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1757953060933</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1757953060933</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Started work on reading more complex notation\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1758024753215</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1758024753215</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Finished file reader - started integrating into player.py.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1758029650619</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1758029650619</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Imported code from HAILO Hackathon\" />\r\n    <MESSAGE value=\"Type hints and working POC\" />\r\n    <MESSAGE value=\"Rework wave dict into Enum with new call.\" />\r\n    <MESSAGE value=\"Started work on reading more complex notation\" />\r\n    <MESSAGE value=\"Finished file reader - started integrating into player.py.\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Finished file reader - started integrating into player.py.\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7c3a94029c07c87a1f048295c171463c35f5abe4)
+++ b/.idea/workspace.xml	(date 1758040332674)
@@ -4,10 +4,8 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="bff21e70-3f4d-41d7-80e9-ed1bbef9b25e" name="Changes" comment="Finished file reader - started integrating into player.py.">
+    <list default="true" id="bff21e70-3f4d-41d7-80e9-ed1bbef9b25e" name="Changes" comment="Finished integrating file reader with player.py.">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/file_reader.py" beforeDir="false" afterPath="$PROJECT_DIR$/file_reader.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/notes.txt" beforeDir="false" afterPath="$PROJECT_DIR$/notes.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/player.py" beforeDir="false" afterPath="$PROJECT_DIR$/player.py" afterDir="false" />
     </list>
@@ -134,7 +132,15 @@
       <option name="project" value="LOCAL" />
       <updated>1758029650619</updated>
     </task>
-    <option name="localTasksCounter" value="6" />
+    <task id="LOCAL-00006" summary="Finished integrating file reader with player.py.">
+      <option name="closed" value="true" />
+      <created>1758039252365</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1758039252365</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
@@ -143,6 +149,7 @@
     <MESSAGE value="Rework wave dict into Enum with new call." />
     <MESSAGE value="Started work on reading more complex notation" />
     <MESSAGE value="Finished file reader - started integrating into player.py." />
-    <option name="LAST_COMMIT_MESSAGE" value="Finished file reader - started integrating into player.py." />
+    <MESSAGE value="Finished integrating file reader with player.py." />
+    <option name="LAST_COMMIT_MESSAGE" value="Finished integrating file reader with player.py." />
   </component>
 </project>
\ No newline at end of file
